# Valkyrie 抽象语法树节点定义
# 使用 Valkyrie 语言实现

# 基础 AST 节点
let ASTNode = {
    type = "",
    line = 0,
    column = 0
}

# 程序根节点
let Program = {
    type = "Program",
    statements = [],
    line = 0,
    column = 0
}

# 变量声明节点
let VariableDeclaration = {
    type = "VariableDeclaration",
    name = "",
    initializer = {},
    line = 0,
    column = 0
}

# 函数声明节点
let FunctionDeclaration = {
    type = "FunctionDeclaration", 
    name = "",
    parameters = [],
    body = {},
    line = 0,
    column = 0
}

# 参数节点
let Parameter = {
    type = "Parameter",
    name = "",
    line = 0,
    column = 0
}

# 块语句节点
let BlockStatement = {
    type = "BlockStatement",
    statements = [],
    line = 0,
    column = 0
}

# If 语句节点
let IfStatement = {
    type = "IfStatement",
    condition = {},
    thenBranch = {},
    elseBranch = {},
    line = 0,
    column = 0
}

# 表达式语句节点
let ExpressionStatement = {
    type = "ExpressionStatement",
    expression = {},
    line = 0,
    column = 0
}

# 赋值表达式节点
let AssignmentExpression = {
    type = "AssignmentExpression",
    left = {},
    right = {},
    line = 0,
    column = 0
}

# 二元表达式节点
let BinaryExpression = {
    type = "BinaryExpression",
    left = {},
    operator = "",
    right = {},
    line = 0,
    column = 0
}

# 一元表达式节点
let UnaryExpression = {
    type = "UnaryExpression",
    operator = "",
    operand = {},
    line = 0,
    column = 0
}

# 函数调用表达式节点
let CallExpression = {
    type = "CallExpression",
    callee = {},
    arguments = [],
    line = 0,
    column = 0
}

# 标识符节点
let Identifier = {
    type = "Identifier",
    name = "",
    line = 0,
    column = 0
}

# 数字字面量节点
let NumberLiteral = {
    type = "NumberLiteral",
    value = 0,
    line = 0,
    column = 0
}

# 字符串字面量节点
let StringLiteral = {
    type = "StringLiteral",
    value = "",
    line = 0,
    column = 0
}

# 布尔字面量节点
let BooleanLiteral = {
    type = "BooleanLiteral",
    value = false,
    line = 0,
    column = 0
}

# 对象字面量节点
let ObjectLiteral = {
    type = "ObjectLiteral",
    properties = [],
    line = 0,
    column = 0
}

# 创建程序节点
micro createProgram(statements, line, column) {
    let node = {}
    node.type = "Program"
    node.statements = statements
    node.line = line
    node.column = column
    node
}

# 创建变量声明节点
micro createVariableDeclaration(name, initializer, line, column) {
    let node = {}
    node.type = "VariableDeclaration"
    node.name = name
    node.initializer = initializer
    node.line = line
    node.column = column
    node
}

# 创建函数声明节点
micro createFunctionDeclaration(name, parameters, body, line, column) {
    let node = {}
    node.type = "FunctionDeclaration"
    node.name = name
    node.parameters = parameters
    node.body = body
    node.line = line
    node.column = column
    node
}

# 创建参数节点
micro createParameter(name, line, column) {
    let node = {}
    node.type = "Parameter"
    node.name = name
    node.line = line
    node.column = column
    node
}

# 创建块语句节点
micro createBlockStatement(statements, line, column) {
    let node = {}
    node.type = "BlockStatement"
    node.statements = statements
    node.line = line
    node.column = column
    node
}

# 创建 If 语句节点
micro createIfStatement(condition, thenBranch, elseBranch, line, column) {
    let node = {}
    node.type = "IfStatement"
    node.condition = condition
    node.thenBranch = thenBranch
    node.elseBranch = elseBranch
    node.line = line
    node.column = column
    node
}

# 创建表达式语句节点
micro createExpressionStatement(expression, line, column) {
    let node = {}
    node.type = "ExpressionStatement"
    node.expression = expression
    node.line = line
    node.column = column
    node
}

# 创建赋值表达式节点
micro createAssignmentExpression(left, right, line, column) {
    let node = {}
    node.type = "AssignmentExpression"
    node.left = left
    node.right = right
    node.line = line
    node.column = column
    node
}

# 创建二元表达式节点
micro createBinaryExpression(left, operator, right, line, column) {
    let node = {}
    node.type = "BinaryExpression"
    node.left = left
    node.operator = operator
    node.right = right
    node.line = line
    node.column = column
    node
}

# 创建一元表达式节点
micro createUnaryExpression(operator, operand, line, column) {
    let node = {}
    node.type = "UnaryExpression"
    node.operator = operator
    node.operand = operand
    node.line = line
    node.column = column
    node
}

# 创建函数调用表达式节点
micro createCallExpression(callee, args, line, column) {
    let node = {}
    node.type = "CallExpression"
    node.callee = callee
    node.arguments = args
    node.line = line
    node.column = column
    node
}

# 创建标识符节点
micro createIdentifier(name, line, column) {
    let node = {}
    node.type = "Identifier"
    node.name = name
    node.line = line
    node.column = column
    node
}

# 创建数字字面量节点
micro createNumberLiteral(value, line, column) {
    let node = {}
    node.type = "NumberLiteral"
    node.value = value
    node.line = line
    node.column = column
    node
}

# 创建字符串字面量节点
micro createStringLiteral(value, line, column) {
    let node = {}
    node.type = "StringLiteral"
    node.value = value
    node.line = line
    node.column = column
    node
}

# 创建布尔字面量节点
micro createBooleanLiteral(value, line, column) {
    let node = {}
    node.type = "BooleanLiteral"
    node.value = value
    node.line = line
    node.column = column
    node
}

# 创建对象字面量节点
micro createObjectLiteral(properties, line, column) {
    let node = {}
    node.type = "ObjectLiteral"
    node.properties = properties
    node.line = line
    node.column = column
    node
}

# 数组字面量节点
let ArrayLiteral = {
    type = "ArrayLiteral",
    elements = [],
    line = 0,
    column = 0
}

# 创建数组字面量节点
micro createArrayLiteral(elements, line, column) {
    let node = {}
    node.type = "ArrayLiteral"
    node.elements = elements
    node.line = line
    node.column = column
    node
}