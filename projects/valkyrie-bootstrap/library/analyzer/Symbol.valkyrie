namespace package::analyzer;

using package::ast::Node;

⍝ 符号类，表示程序中的一个命名实体（如变量、函数、类、Trait 等）
class Symbol {
    ⍝ 符号的完全限定名 (Fully Qualified Name)，例如 ["package", "module", "MyClass", "myMethod"]
    full_name: Array<String>;
    ⍝ 符号的类型（例如，对于变量，是其数据类型；对于函数，是其函数签名类型）
    symbol_type: Any; ⍝ 暂时使用 Any，后续会定义更具体的 Type 类
    ⍝ 符号的种类（例如 "Variable", "Function", "Class", "Trait", "Parameter" 等）
    kind: String;
    ⍝ 符号声明所在的 AST 节点引用
    declaration_node: Node;

    constructor(namepath: Array<String>, symbol_type: Any, kind: String, declaration_node: Node) {
        self.full_name = namepath;
        self.symbol_type = symbol_type;
        self.kind = kind;
        self.declaration_node = declaration_node;
    }

    ⍝ 获取符号的短名称（不包含命名空间）
    micro get_short_name(self) -> String {
        if self.full_name.length > 0 {
            return self.full_name[self.full_name.length - 1];
        }
        return "";
    }

    ⍝ 获取符号的完全限定名字符串表示
    micro get_fqn(self) -> String {
        return self.full_name.join("::");
    }
}