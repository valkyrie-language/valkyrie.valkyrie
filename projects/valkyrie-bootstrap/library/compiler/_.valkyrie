# Valkyrie 编译器核心模块
# 提供词法分析、语法分析、代码生成和多文件编译功能
namespace package::compiler;

using package::lexer::tokenize;
using package::parser::parse;
using package::codegen::generate;
using package::lexer::Token;
using package::compiler::CompilerOptions;

# 生成单一JS文件的主函数
micro compile_asts(file_contents: Map<String, String>, mode: String) -> String {
    return compile_asts_with_options(file_contents, mode, null);
}

# REPL模式的单一JS文件生成
micro generate_single_js(file_contents: Map<String, String>) -> String {
    return compile_asts(file_contents, "repl");
}

# 标准模式的单一JS文件生成
micro generate_single_js_standard(file_contents: Map<String, String>) -> String {
    return compile_asts(file_contents, "standard");
}

# 带选项的REPL模式的单一JS文件生成
micro generate_single_js_with_options(file_contents: Map<String, String>, options: CompilerOptions) -> String {
    return compile_asts_with_options(file_contents, "repl", options);
}

# 带选项的标准模式的单一JS文件生成
micro generate_single_js_standard_with_options(file_contents: Map<String, String>, options: CompilerOptions) -> String {
    return compile_asts_with_options(file_contents, "standard", options);
}

# 编译单个源代码文本文件
micro package_compiler_compile_text(source_text: String) -> String {
    let file_contents = {
        "main.valkyrie": source_text
    };
    return compile_asts(file_contents, "repl");
}

# 带选项的编译单个源代码文本文件
micro package_compiler_compile_text_with_options(source_text: String, options: CompilerOptions) -> String {
    let file_contents = {
        "main.valkyrie": source_text
    };
    return compile_asts_with_options(file_contents, "repl", options);
}