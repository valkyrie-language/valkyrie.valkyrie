namespace package::compiler;

using package::compiler::DiagnosticLevel;

class CompilerDiagnostics {
    constructor() {
        self.diagnostics = [];
    }
    # Get all diagnostics combined
    micro get_all_diagnostics(self) -> Array<Map<String, String>> {
        let result = [];
        let i = 0;
        while i < self.diagnostics.length {
            result.push(self.diagnostics[i]);
            i = i + 1;
        }
        return result;
    }
    micro add_error(self, message: String, line: u32, column: u32) {
        self.diagnostics.push({
            level: DiagnosticLevel::ERROR,
            message: message,
            line: line,
            column: column
        });
    }

    micro add_warning(self, message: String, line: u32, column: u32) {
        self.diagnostics.push({
            level: DiagnosticLevel::WARNING,
            message: message,
            line: line,
            column: column
        });
    }

    micro has_errors(self) {
        let i = 0;
        while i < self.diagnostics.length {
            if self.diagnostics[i].level == DiagnosticLevel::ERROR {
                return true;
            }
            i = i + 1;
        }
        return false;
    }

    micro has_warnings(self) {
        let i = 0;
        while i < self.diagnostics.length {
            if self.diagnostics[i].level == DiagnosticLevel::WARNING {
                return true;
            }
            i = i + 1;
        }
        return false;
    }

    micro clear_diagnostics(self) {
        self.diagnostics = [];
    }
}