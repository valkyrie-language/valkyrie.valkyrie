namespace package::compiler;

using package::lexer::ValkyrieLexer;
using package::parser::parse;
using package::ast::Node;
using package::compiler::ScopeManager;
using package::compiler::DependencyAnalyzer;
using package::compiler::CompilerDiagnostics;

# Create compiler error object
micro create_error(message: String, line: i32, column: i32) -> Map<String, String> {
    return {
        "type": "CompilerError",
        "message": message,
        "line": line,
        "column": column
    };
}

# Create compiler warning object
micro create_warning(message: String, line: i32, column: i32) -> Map<String, String> {
    return {
        "type": "CompilerWarning",
        "message": message,
        "line": line,
        "column": column
    };
}

# Count AST nodes
micro count_ast_nodes(node: Node) -> i32 {
    if node == null {
        return 0;
    }
    
    let count = 1;
    
    if node.statements != null {
        let i = 0;
        while i < node.statements.length {
            count = count + count_ast_nodes(node.statements[i]);
            i = i + 1;
        }
    }
    
    if node.body != null {
        count = count + count_ast_nodes(node.body);
    }
    
    if node.left != null {
        count = count + count_ast_nodes(node.left);
    }
    
    if node.right != null {
        count = count + count_ast_nodes(node.right);
    }
    
    if node.expression != null {
        count = count + count_ast_nodes(node.expression);
    }
    
    if node.condition != null {
        count = count + count_ast_nodes(node.condition);
    }
    
    if node.thenBranch != null {
        count = count + count_ast_nodes(node.thenBranch);
    }
    
    if node.elseBranch != null {
        count = count + count_ast_nodes(node.elseBranch);
    }
    
    return count;
}

# Syntax validation
micro validate_syntax(source: String) -> Map<String, String> {
    let lexer = new ValkyrieLexer(source);
    let tokens = lexer.tokenize();
    
    if tokens.length == 0 {
        return {
            "valid": false,
            "error": "Lexical analysis failed"
        };
    }
    
    let ast = parse(tokens);
    if ast.`type` == "" || ast.`type` == "ParseError" {
        return {
            "valid": false,
            "error": "Syntax analysis failed"
        };
    }
    
    return {
        "valid": true,
        "error": null
    };
}

# Path joining utility function  
micro join_path(path_array: Array<String>, separator: String) -> String {
    if path_array == null || path_array.length == 0 {
        return "";
    }
    
    let result = path_array[0];
    let i = 1;
    while i < path_array.length {
        result = result + separator + path_array[i];
        i = i + 1;
    }
    return result;
}

