namespace package::parser;

# 解析模式表达式，支持标识符和字面量作为模式
micro parse_pattern_expression(parser) {
    let token = parser.current_token;
    
    if token.`type` == "SYMBOL_XID" {
        let name = token.value;
        parser.advance();
        
        # 检查是否是静态成员访问 (Type::Member)
        if parser.current_token.`type` == "DOUBLE_COLON" {
            parser.advance(); # skip '::'
            
            if parser.current_token.`type` == "SYMBOL_XID" {
                let member_name = parser.current_token.value;
                parser.advance();
                
                let node = parser.mark_node("StaticMemberAccess");
                node.object = name;
                node.member = member_name;
                return node;
            } else {
                let error = {};
                error.`type` = "ParseError";
                error.message = "Expected member name after '::' but got " + parser.current_token.`type`;
                error.line = parser.current_token.line;
                error.column = parser.current_token.column;
                return error;
            }
        } else {
            let node = parser.mark_node("TypeIdentifier");
            node.name = name;
            return node;
        }
    } else if token.`type` == "STRING" {
        parser.advance();
        let node = parser.mark_node("StringLiteral");
        node.value = token.value;
        return node;
    } else if token.`type` == "NUMBER" {
        parser.advance();
        let node = parser.mark_node("NumberLiteral");
        node.value = token.value;
        return node;
    } else if token.`type` == "BOOLEAN" {
        parser.advance();
        let node = parser.mark_node("BooleanLiteral");
        node.value = token.value;
        return node;
    } else if token.`type` == "KEYWORD" && (token.value == "true" || token.value == "false") {
        parser.advance();
        let node = parser.mark_node("BooleanLiteral");
        node.value = token.value;
        return node;
    } else {
        let error = {};
        error.`type` = "ParseError";
        error.message = "Expected identifier or literal in pattern expression but got " + token.`type`;
        error.line = token.line;
        error.column = token.column;
        return error;
    }
}