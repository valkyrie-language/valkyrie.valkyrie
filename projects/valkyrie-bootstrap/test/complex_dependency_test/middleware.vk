# 复杂依赖测试 - 中间层
# 依赖基础层，被应用层依赖

namespace middleware::services;

using foundation::core;

# 数组处理服务
class ArrayService {
    constructor() {
        this.data = [];
    }
    
    micro add(item) {
        this.data.push(item);
    }
    
    micro getEvenNumbers() {
        let evens = [];
        let i = 0;
        while i < this.data.length {
            if isEven(this.data[i]) {
                evens.push(this.data[i]);
            }
            i = i + 1;
        }
        return evens;
    }
    
    micro getOddNumbers() {
        let odds = [];
        let i = 0;
        while i < this.data.length {
            if isOdd(this.data[i]) {
                odds.push(this.data[i]);
            }
            i = i + 1;
        }
        return odds;
    }
    
    micro getMaxValue() {
        if this.data.length == 0 {
            return 0;
        }
        
        let maxVal = this.data[0];
        let i = 1;
        while i < this.data.length {
            maxVal = max(maxVal, this.data[i]);
            i = i + 1;
        }
        return maxVal;
    }
}

# 字符串处理服务
micro formatMessage(prefix, message, suffix) {
    let temp = concat(prefix, message);
    return concat(temp, suffix);
}

micro createBanner(text, char) {
    let border = repeat(char, text.length + 4);
    let middle = concat(char + " ", concat(text, " " + char));
    
    let result = concat(border, "\\n");
    result = concat(result, middle);
    result = concat(result, "\\n");
    result = concat(result, border);
    
    return result;
}