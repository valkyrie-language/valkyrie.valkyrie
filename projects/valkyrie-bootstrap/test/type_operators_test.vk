namespace main;

class Animal {
    constructor(name: String) {
        self.name = name;
    }
}

class Dog extends Animal {
    constructor(name: String, breed: String) {
        super(name);
        self.breed = breed;
    }
}

micro test_is_operator() {
    let animal = new Animal("Generic");
    let dog = new Dog("Buddy", "Golden Retriever");
    
    # 测试 is 操作符
    let result1 = animal is Animal;
    let result2 = dog is Animal;
    let result3 = dog is Dog;
    let result4 = animal is Dog;
    
    return result1 && result2 && result3 && !result4;
}

micro test_is_optional_operator() {
    let animal = new Animal("Generic");
    let dog = new Dog("Buddy", "Golden Retriever");
    
    # 测试 is? 操作符
    let result1 = animal is? Animal;
    let result2 = dog is? Animal;
    let result3 = dog is? Dog;
    let result4 = animal is? Dog;
    
    return result1 && result2 && result3 && !result4;
}

micro test_as_operator() {
    let dog = new Dog("Buddy", "Golden Retriever");
    
    # 测试 as 操作符
    let animal_ref = dog as Animal;
    
    return animal_ref.name == "Buddy";
}

micro test_as_optional_operator() {
    let dog = new Dog("Buddy", "Golden Retriever");
    let animal = new Animal("Generic");
    
    # 测试 as? 操作符
    let dog_ref = animal as? Dog;
    let animal_ref = dog as? Animal;
    
    return dog_ref == null && animal_ref != null;
}

micro main() {
    let test1 = test_is_operator();
    let test2 = test_is_optional_operator();
    let test3 = test_as_operator();
    let test4 = test_as_optional_operator();
    
    if test1 && test2 && test3 && test4 {
        return "All type operator tests passed!";
    } else {
        return "Some type operator tests failed!";
    }
}